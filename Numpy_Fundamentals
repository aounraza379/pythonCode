import numpy as np

# Creating Arrays
# A simple 1D array (vector)
arr_1d = np.array([1, 2, 3, 4])
print(f"1D Array:\n{arr_1d}")

# A 2D array (matrix)
arr_2d = np.array([[10, 20], [30, 40]])
print(f"\n2D Array:\n{arr_2d}")

# Array of 5 zeros
arr_zeros = np.zeros(5)
print(f"\nZeros Array:\n{arr_zeros}")

# Array of 3 equally spaced points between 0 and 1
arr_lin = np.linspace(0, 1, 3)
print(f"\nLinspace Array:\n{arr_lin}")

# Create an array and check its attributes
data = np.arange(12, dtype=np.int32)
print(f"\nInitial Data Shape: {data.shape}, Dtype: {data.dtype}")

# Reshape for matrix operations (3 rows, 4 columns)
matrix = data.reshape(3, 4)
print(f"Reshaped Matrix:\n{matrix}")
print(f"Matrix Shape: {matrix.shape}")

# Array Operations (Element-Wise)
a = np.array([1, 2, 3])
b = np.array([10, 20, 30])

# Addition (Element-wise)
print(f"a + b = {a + b}") # [11, 22, 33]

# Multiplication (Element-wise)
print(f"a * 2 = {a * 2}") # [ 2,  4,  6]
print(f"a * b = {a * b}") # [10, 40, 90]

# Broadcasting & Matrix Operations
A = np.array([[1, 2, 3],
              [4, 5, 6]]) # Shape (2, 3)
scalar = 10               # Shape (1,) -> stretches across the entire array

print(f"A + 10:\n{A + scalar}")
# Output:
# [[11, 12, 13],
#  [14, 15, 16]]

X = np.array([[1, 2], [3, 4]]) # Shape (2, 2)
Y = np.array([[5, 6], [7, 8]]) # Shape (2, 2)

# Element-wise product (Hadamard Product)
print(f"\nElement-wise (X * Y):\n{X * Y}")
# [[ 5, 12],
#  [21, 32]]

# Matrix Multiplication (dot product)
print(f"\nMatrix Multiply:\n{X @ Y}")
# [[1*5 + 2*7, 1*6 + 2*8], -> [[19, 22],
#  [3*5 + 4*7, 3*6 + 4*8]] ->  [43, 50]]

matrix = np.array([[10, 11, 12],
                   [20, 21, 22],
                   [30, 31, 32]])

# Indexing: Get the element at the second row (index 1), third column (index 2)
print(f"Element at (1, 2): {matrix[1, 2]}") # Output: 22

# Slicing: Get the first two rows and all columns
print(f"\nFirst two rows:\n{matrix[:2, :]}")
# [[10, 11, 12],
#  [20, 21, 22]]

# Slicing: Get all rows, but only the last column
print(f"\nLast column:\n{matrix[:, -1]}") # Output: [12 22 32]

# Fancy Indexing & Boolean Masking
# Select all elements greater than 20
mask = matrix > 20
print(f"\nBoolean Mask:\n{mask}")
# [[False, False, False],
#  [False, True, True],
#  [True, True, True]]

# Apply the mask to the array
print(f"\nFiltered Array (> 20): {matrix[mask]}")
# Output: [21 22 30 31 32] (returns a 1D array of the matching values)

# Select rows 0 and 2 in that specific order
print(f"\nFancy Indexing (Rows 0 and 2):\n{matrix[[0, 2]]}")
# [[10, 11, 12],
#  [30, 31, 32]]
